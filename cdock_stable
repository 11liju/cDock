#!/bin/bash

# version 4.2

bundle_check()
{
	cDock_app=$(stat -s ./bundles/cDock.bundle)
	cDock_app=${cDock_app##*st_mtime=}
	cDock_app=${cDock_app%% *}
	
	cDock_sys=$(stat -s ~/Library/Application\ Support/SIMBL/Plugins/cDock.bundle)
	cDock_sys=${cDock_sys##*st_mtime=}
	cDock_sys=${cDock_sys%% *}
	
	if [[ "$cDock_app" -gt "$cDock_sys" ]]; then	
		file_cleanup ~/Library/Application\ Support/SIMBL/Plugins/cDock.bundle
		cp -frvp ./bundles/cDock.bundle ~/Library/Application\ Support/SIMBL/Plugins/cDock.bundle
	fi
}

credits()
{
	CRFILE=$(more ./creditsCopy.html)
	CRFILE=${CRFILE//"(insert_update_path)"/"${scriptDirectory}"}
	echo "${CRFILE}" > ./Credits.html
}

logging()
{
	mkdir -pv ~/Library/Application\ Support/cDock/logs
	mkdir -pv ~/Library/Application\ Support/wUpdater/logs
	for (( c=1; c<6; c++ )); do 
		if [ ! -e ~/Library/Application\ Support/cDock/logs/${c}.log ]; then touch ~/Library/Application\ Support/cDock/logs/${c}.log; fi 
	done
	for (( c=5; c>1; c-- )); do 
		cat ~/Library/Application\ Support/cDock/logs/$((c - 1)).log > ~/Library/Application\ Support/cDock/logs/${c}.log
	done
	> ~/Library/Application\ Support/cDock/logs/1.log
}

preferences()
{
	curver=$(cat ./version.txt)
	if [[ ! -e ~/Library/Preferences/org.w0lf.cDock.plist ]]; then
		"${COCOAD}" textbox --float --width 650 --height 700 --title "Welcome" --text-from-file ./Readme.html --button1 "Okay" >/dev/null
	else
		vernum=$(defaults read ~/Library/Preferences/org.w0lf.cDock version)
		if [[ $curver != $vernum ]]; then 
			defaults write ~/Library/Preferences/org.w0lf.cDock cleanUp 1
			"${COCOAD}" textbox --float --width 650 --height 700 --title "Welcome" --text-from-file ./Readme.html --button1 "Okay" >/dev/null
		fi
	fi
	defaults write ~/Library/Preferences/org.w0lf.cDock.plist NSUserKeyEquivalents '<dict><key>About cDock</key><string>@i</string></dict>'
	defaults write ~/Library/Preferences/org.w0lf.cDock version $curver
}

updates()
{
	curver=$(cat ./version.txt)
	dlurl="http://sourceforge.net/projects/cdock/files/latest/download"
	verurl="http://sourceforge.net/projects/cdock/files/version.txt/download"
	cur_date=$(date "+%y%m%d")	
	lastupdateCheck=$(defaults read "${plist}" "lastupdateCheck" 2>/dev/null || defaults write "${plist}" "lastupdateCheck" 0 2>/dev/null)
	if [[ $lastupdateCheck != $cur_date ]]; then
		defaults write ~/Library/Preferences/org.w0lf.cDock "lastupdateCheck" "${cur_date}"
		./updates/wUpdater.app/Contents/MacOS/wUpdater "c" "$myDir" "org.w0lf.cDock" $curver $verurl $dlurl "0" &
	fi	
}

file_cleanup()
{
	for str in "$@"; do 
		if [[ -e "$str" ]]; then
			if [[ -d "$str" ]]; then
				rm -rv "$str"
			else
				rm -v "$str"
			fi
		fi
	done
}

dir_setup()
{
	mkdir -pv ~/Library/Application\ Support/cDock
	mkdir -pv ~/Library/LaunchAgents
	mkdir -pv ~/Library/Application\ Support/SIMBL/Plugins
}

app_clean()
{
	if [[ -e /Library/ScriptingAdditions/SIMBL.osax ]]; then
		echo "Old SIMBL install detected, prompting for removal..."
		osascript -e 'do shell script "./adminu.sh" with administrator privileges'
	fi

	# Clear possibly outdated files
	file_cleanup /Library/Application\ Support/SIMBL/Plugins/BlackDock.bundle \
	~/Library/Application\ Support/SIMBL/Plugins/BlackDock.bundle \
	~/Library/Application\ Support/SIMBL/Plugins/cDock.bundle \
	~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle \
	~/Library/LaunchAgents/com.w0lf.BlackDock.plist \
	~/Library/LaunchAgents/com.w0lf.cDock.plist \
	~/Library/LaunchAgents/org.w0lf.cDock.plist \
	~/Library/Application\ Scripts/BlackDock \
	~/Library/Application\ Scripts/cDock \
	~/Library/Application\ Support/cDock
}

bundle_picker()
{
	resultvalue=$("${COCOAD}" fileselect --float \
	--with-extensions ".txt" \
	--with-directory ./premade)
	echo "$resultvalue"
}

chooser()
{
	resultvalue=$("${COCOAD}" standard-dropdown --float \
	--title "Custom Dock Installer" \
	--text "Choose an action:" \
	--height 140 \
	--icon dock \
	--icon-height 64 \
	--icon-width 64 \
	--items "Install Transparent dock" "Install Customizable dock" "Install Pre-Made dock" "Install Colored Finder sidebar" "Restart Dock" "Restore Finder" "Restore Dock")
	itt=0
	for item in $resultvalue; do
		res[$itt]=$item
		itt=$((itt + 1))
	done
	if [[ ${res[0]} -eq 1 ]]; then
		if [[ ${res[1]} -eq 0 ]]; then
			echo "Installing transparent dock"
			SOURCEDOCK="./premade/transparent.txt"
		elif [[ ${res[1]} -eq 1 ]]; then
			echo "Installing customizable dock"
			CUSTOMDOCK=true
			SOURCEDOCK="./premade/base.txt"
		elif [[ ${res[1]} -eq 2 ]]; then
			echo "Installing pre-made dock"
			SOURCEDOCK=$(bundle_picker)
			if [[ ! -n "$SOURCEDOCK" ]]; then
				installme=false
			fi
		elif [[ ${res[1]} -eq 3 ]]; then
			echo "Installing colored finder sidebar icons"
			installme=false
			install_finder_bundle
		elif [[ ${res[1]} -eq 4 ]]; then
			echo "Restarting dock"
			installme=false
			killall "Dock"
		elif [[ ${res[1]} -eq 5 ]]; then
			echo "Restoring Finder"
			installme=false
			file_cleanup ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle
			killall "Finder"
		elif [[ ${res[1]} -eq 6 ]]; then
			echo "Restoring dock"
			installme=false
			SOURCEDOCK=""
			app_clean
			killall "SIMBL Agent"
			killall "Dock"
		else
			echo "???"
			installme=false
			SOURCEDOCK=""
		fi
	else
		installme=false
		echo "Canceled"
	fi
}

install_finder_bundle()
{
	launch_agent
	simbl_check
	cp -frv ./bundles/ColorfulSidebar.bundle ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle
	killall "Finder"
	echo -n "Finished installing"
}

install_bundle()
{
	doclean=$(defaults read ~/Library/Preferences/org.w0lf.cDock cleanUp)
	
	# Clean check
	if [[ "$doclean" -eq "1" ]]; then
		app_clean
		dir_setup
		defaults write ~/Library/Preferences/org.w0lf.cDock cleanUp 0
	fi
	
	bundle_check
	launch_agent
	simbl_check
	
	# Mirror check
	res=$(defaults read com.apple.dock hide-mirror)
	if [[ $res != 0 ]]; then
		defaults write com.apple.dock hide-mirror -bool false
	fi
	
	# DockMod check
	res=$(defaults read com.apple.dock dockmod-enabled)
	if [[ $res != 0 ]]; then
		defaults write com.apple.dock dockmod-enabled 0
	fi
	
	# Move dock items
	cp -fv "${SOURCEDOCK}" ~/Library/Application\ Support/cDock/dock_settings.txt
	cp -frv ./basic/ ~/Library/Application\ Support/cDock
	
	# Open settings and "instructions" for user
	if ($CUSTOMDOCK); then 
		open ./"Dock Refresh".app
		open -e ~/Library/Application\ Support/cDock/dock_settings.txt
		open -e ~/Library/Application\ Support/cDock/settings\ info.txt
	fi
		
	# Restart dock
	exec ~/Library/Application\ Support/cDock/dockmonitor.sh &
	killall "Dock"
	echo -n "Finished installing"
}

simbl_check()
{
	if [[ ! -e ~/Library/Application\ Support/cDock/SIMBL\ Agent.app ]]; then
		cp -frv ./SIMBL\ Agent.app ~/Library/Application\ Support/cDock/SIMBL\ Agent.app
	fi
}

launch_agent()
{
	CRFILE=$(more ./dockmonitor)
	echo "$CRFILE" > ~/Library/Application\ Support/cDock/dockmonitor.sh
	chmod 755 ~/Library/Application\ Support/cDock/dockmonitor.sh
	defaults write ~/Library/LaunchAgents/com.w0lf.cDock Label com.w0lf.cDock
	defaults write ~/Library/LaunchAgents/com.w0lf.cDock Program "/Users/$(whoami)/Library/Application Support/cDock/dockmonitor.sh"
	defaults write ~/Library/LaunchAgents/com.w0lf.cDock RunAtLoad -bool true
}

res[0]=0
COCOAD=./CocoaDialog.app/Contents/MacOS/CocoaDialog
SOURCEDOCK="./premade/transparent.txt"
plist=~/Library/Preferences/org.w0lf.cDock
CUSTOMDOCK=false
installme=true
autoCheck=$(defaults read "${plist}" autoCheck 2>/dev/null || defaults write "${plist}" autoCheck 1 2>/dev/null)

scriptDirectory=$(cd "${0%/*}" && echo $PWD)
myDir="$scriptDirectory"
for i in {1..2}; do
	myDir=$(dirname "$myDir")
done

logging
exec &>~/Library/Application\ Support/cDock/logs/1.log
credits
dir_setup
preferences
if [[ $autoCheck == 1 ]]; then updates; fi
chooser
if ($installme); then
	install_bundle
fi