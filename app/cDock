#!/bin/bash

# -- Information --
# Maintained By : Wolfgang Baird
# Version : 6.0.5
# Updated : Aug / 16 / 2014

pashua_run() {

	# Write config file
	pashua_configfile=`/usr/bin/mktemp /tmp/pashua_XXXXXXXXX`
	echo "$1" > $pashua_configfile

	# Find Pashua binary. We do search both . and dirname "$0"
	# , as in a doubleclickable application, cwd is /
	bundlepath="Pashua.app/Contents/MacOS/Pashua"
	if [ "$3" = "" ]
	then
		mypath=$(dirname "$0")
		for searchpath in "$mypath/Pashua" "$mypath/$bundlepath" "./$bundlepath" \
						  "/Applications/$bundlepath" "$HOME/Applications/$bundlepath"
		do
			if [ -f "$searchpath" -a -x "$searchpath" ]
			then
				pashuapath=$searchpath
				break
			fi
		done
	else
		# Directory given as argument
		pashuapath="$3/$bundlepath"
	fi

	if [ ! "$pashuapath" ]
	then
		echo "Error: Pashua could not be found"
		exit 1
	fi

	# Manage encoding
	if [ "$2" = "" ]
	then
		encoding=""
	else
		encoding="-e $2"
	fi

	# Get result
	result=$("$pashuapath" $encoding $pashua_configfile | perl -pe 's/ /;;;/g;')

	# Remove config file
	rm $pashua_configfile

	# Parse result
	for line in $result
	do
		key=$(echo $line | sed 's/^\([^=]*\)=.*$/\1/')
		value=$(echo $line | sed 's/^[^=]*=\(.*\)$/\1/' | sed 's/;;;/ /g')
		varname=$key
		varvalue="$value"
		eval $varname='$varvalue'
	done

}

vercomp() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

verres() {
	vercomp "$1" "$2"
	case $? in
		0) output='=';;
        1) output='>';;
        2) output='<';;
	esac
	echo $output
}

logging()
{
	mkdir -pv ~/Library/Application\ Support/cDock/.logs
	mkdir -pv ~/Library/Application\ Support/wUpdater/logs
	for (( c=1; c<6; c++ )); do 
		if [ ! -e ~/Library/Application\ Support/cDock/.logs/${c}.log ]; then touch ~/Library/Application\ Support/cDock/.logs/${c}.log; fi 
	done
	for (( c=5; c>1; c-- )); do 
		cat ~/Library/Application\ Support/cDock/.logs/$((c - 1)).log > ~/Library/Application\ Support/cDock/.logs/${c}.log
	done
	> ~/Library/Application\ Support/cDock/.logs/1.log
}

preferences()
{
	welcome="
		*.transparency=1
		*.title = Welcome to cDock
	
		# Introductory text
		welcometb.type = text
		welcometb.default = cDock is an application for customizing your dock on OSX 10.9 and newer. Thanks for using cDock!
		welcometb.width = 400

		# Accept button
		welcomedb.type = defaultbutton
		welcomedb.label = Continue
	"
	
	curver=$(cat ./version.txt)
	if [[ ! -e "${plist}" ]]; then
		pashua_run "$welcome" 'utf8'
	else
		vernum=$(defaults read "${plist}" version)
		if [[ $(verres $curver $vernum) = ">" ]]; then
			rsync -ruv "$app_support"/ ~/Library/Application\ Support/cDock
			defaults write ~/Library/Preferences/org.w0lf.cDock cleanUp 1
		fi
	fi
	defaults write "${plist}" NSUserKeyEquivalents '<dict><key>About cDock</key><string>@i</string></dict>'
	defaults write "${plist}" version $curver
	chmod 644 "${plist}"
}

updates()
{
	curver=$(cat ./version.txt)
	verurl="http://sourceforge.net/projects/cdock/files/version.txt/download"
	logurl="http://sourceforge.net/projects/cdock/files/versionInfo.txt/download"
	
	beta_updates=$(defaults read org.w0lf.cDock betaUpdates 2>/dev/null || echo -n 0)
	
	if [[ $beta_updates -eq 1 ]]; then
		# Beta urls
		dlurl="http://sourceforge.net/projects/cdock/files/cDock%20Beta/current.zip/download"
		verurl="http://sourceforge.net/projects/cdock/files/cDock%20Beta/versionBeta.txt/download"
		logurl="http://sourceforge.net/projects/cdock/files/cDock%20Beta/versionInfoBeta.txt/download"
	else
		# Stable urls
		dlurl="http://sourceforge.net/projects/cdock/files/latest/download"
		verurl="http://sourceforge.net/projects/cdock/files/version.txt/download"
		logurl="http://sourceforge.net/projects/cdock/files/versionInfo.txt/download"
	fi
	
	cur_date=$(date "+%y%m%d")	
	lastupdateCheck=$(defaults read "${plist}" "lastupdateCheck" 2>/dev/null || defaults write "${plist}" "lastupdateCheck" 0 2>/dev/null)
	if [[ $lastupdateCheck != $cur_date ]]; then
		defaults write "${plist}" "lastupdateCheck" "${cur_date}"
		./updates/wUpdater.app/Contents/MacOS/wUpdater "c" "$myDir" "org.w0lf.cDock" $curver $verurl $logurl $dlurl $autoInstall &
	fi	
}

file_cleanup()
{
	for str in "$@"; do 
		if [[ -e "$str" ]]; then
			if [[ -d "$str" ]]; then
				rm -rv "$str"
			else
				rm -v "$str"
			fi
		fi
	done
}

dir_setup()
{
	mkdir -pv ~/Library/Application\ Support/cDock
	mkdir -pv ~/Library/LaunchAgents
	mkdir -pv ~/Library/Application\ Support/SIMBL/Plugins
}

# Clean possibly outdated files
app_clean()
{	
	file_cleanup /Library/Application\ Support/SIMBL/Plugins/BlackDock.bundle \
	~/Library/Application\ Support/SIMBL/Plugins/BlackDock.bundle \
	~/Library/Application\ Support/SIMBL/Plugins/cDock.bundle \
	~/Library/LaunchAgents/com.w0lf.BlackDock.plist \
	~/Library/LaunchAgents/com.w0lf.cDock.plist \
	~/Library/LaunchAgents/org.w0lf.cDock.plist \
	~/Library/Application\ Scripts/BlackDock \
	~/Library/Application\ Scripts/cDock \
	~/Library/Application\ Support/cDock
	
	echo "Cleaned"
	#~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle
}

bundle_picker()
{
	resultvalue=$("${cocoad}" fileselect --float \
	--with-extensions ".txt" \
	--with-directory ./premade)
	echo "$resultvalue"
}

get_results()
{
		# Custom dock
		if [[ $pop0 = "Current" ]]; then
			echo "???"
			installme=false
			sourcedock=""
		elif [[ $pop0 = "Custom" ]]; then	
			customdock=true
			installme=true
			jimbo="${pop0}"
		elif [[ $pop0 = "Restore" ]]; then
			installme=false
			sourcedock=""
			rm -rf ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle
			app_clean
			killall "SIMBL Agent"
			killall "cDock Agent"
			killall "Dock"
		else
			echo "$pop0"
			installme=true
			defaults write "$HOME"/Library/Application\ Support/cDock/settings.plist theme -string "${pop0}"
			jimbo="${pop0}"
		fi
		
		# Finder colored sidebars
		if [[ $chk1 -eq 1 ]]; then
			if ! [[ -e ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle ]]; then
				install_finder_bundle
			fi
		else
			if [[ -e ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle ]]; then
				file_cleanup ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle
				killall "Finder"
			fi
		fi
		
		# Show Only Active Applications
		if [[ $chk2 -eq 1 ]]; then
			defaults write com.apple.dock static-only -bool true
		else
			defaults write com.apple.dock static-only -bool false
		fi
		
		# Dim hidden items
		if [[ $chk3 -eq 1 ]]; then
			defaults write com.apple.dock showhidden -bool true
		else
			defaults write com.apple.dock showhidden -bool false
		fi
		
		# Lock dock contents
		if [[ $chk4 -eq 1 ]]; then
			defaults write com.apple.Dock contents-immutable -bool true
		else
			defaults write com.apple.Dock contents-immutable -bool false
		fi
		
		# App spacers
		if [[ $pop1 -gt 0 ]]; then
			for ((a=1; a <= $pop1 ; a++)); do
  				defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
			done            
		fi

		# Document spacers
		if [[ $pop2 -gt 0 ]]; then
			for ((a=1; a <= $pop2 ; a++)); do
				defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}'
			done
		fi
		
		# Mouse over highlight
		if [[ $chk5 -eq 1 ]]; then
			defaults write com.apple.dock mouse-over-hilite-stack -bool true
		else
			defaults write com.apple.dock mouse-over-hilite-stack -bool false
		fi
		
		# Change the Dockâ€™s Position // Mav only
		defaults write com.apple.dock pinning -string $pop4

		# Add recent items stack
		if [[ $pop3 = "Yes" ]]; then
			defaults write com.apple.dock persistent-others -array-add '{ "tile-data" = { "list-type" = 1; }; "tile-type" = "recents-tile"; }'
		fi
}

install_finder_bundle()
{
	launch_agent
	rsync -ruv "$bundles"/ColorfulSidebar.bundle ~/Library/Application\ Support/SIMBL/Plugins
	killfinder=true
	dockify=true
	echo -n "Finished installing"
}

install_bundle()
{
	launch_agent
	doclean=$(defaults read "${plist}" cleanUp)
	
	# Clean check
	if [[ "$doclean" -eq "1" ]]; then
		app_clean
		dir_setup
		rm -r ~/Library/Application\ Support/cDock
		rm -r ~/Library/Application\ Support/SIMBL/Plugins/cDock.bundle
		rm -r ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle
		rsync -ruv "$bundles"/ColorfulSidebar.bundle ~/Library/Application\ Support/SIMBL/Plugins
		defaults write "${plist}" cleanUp 0
	fi
	
	rsync -ruv "$app_support"/ ~/Library/Application\ Support/cDock
	rsync -ruv "$bundles"/cDock.bundle ~/Library/Application\ Support/SIMBL/Plugins
	
	# Mirror check
	res=$(defaults read com.apple.dock hide-mirror)
	if [[ $res != 0 ]]; then
		defaults write com.apple.dock hide-mirror -bool false
	fi
	
	# DockMod check
	res=$(defaults read com.apple.dock dockmod-enabled)
	if [[ $res != 0 ]]; then
		defaults write com.apple.dock dockmod-enabled 0
	fi
	
	# Open settings and "instructions" for user
	if ($customdock); then 
		open ./"Dock Refresh".app
		open -e ~/Library/Application\ Support/cDock/themes/Custom/settings.txt
		open -e ~/Library/Application\ Support/cDock/settings\ info.rtf
	fi
	
	defaults write "$HOME"/Library/Application\ Support/cDock/settings.plist theme -string "${jimbo}"
	
	dockify=true
}

launch_agent()
{
	cdockagent="${HOME}/Library/Application Support/cDock/helpers/cDock Agent.app"
	osascript <<EOD
		tell application "System Events"
			make new login item at end of login items with properties {path:"$cdockagent", hidden:false}
		end tell
EOD
}

settings_window()
{
	swOK=0
	swchk0=0
	swchk2=0
	
	autoCheck=$(defaults read "${plist}" autoCheck)
	autoInstall=$(defaults read "${plist}" autoInstall)
	
	set_window="
	*.title = cDock Settings
	*.floating = 1
	*.autosavekey = cDock_settings
	
	# Appearance text
	swtb0.type = text
	swtb0.default = Settings:
	swtb0.rely = -10
	
	# Auto check for updates
	swchk0.type = checkbox
	swchk0.label = Automatically check for updates
	swchk0.rely = -18
	swchk0.default = $autoCheck
	
	# Auto install updates
	swchk2.type = checkbox
	swchk2.label = Automatically install updates
	swchk2.rely = -18
	swchk2.default = $autoInstall
	
	# Check for updates now
	swchk1.type = checkbox
	swchk1.label = Check for updates now
	swchk1.rely = -10
	swchk1.default = 0
	
	# Accept button
	swOK.type = defaultbutton
	swOK.label = Apply
	
	# Cancel button
	swcb.type = cancelbutton
	swcb.label = Cancel
	"
	
	pashua_run "$set_window" 'utf8'
	
	if [[ $swOK -eq 1 ]]; then
		defaults write "${plist}" autoCheck $swchk0
		defaults write "${plist}" autoInstall $swchk2
		if [[ $swchk1 -eq 1 ]]; then
			defaults write "${plist}" "lastupdateCheck" 0
			updates
		fi
	fi
}

evaltxt(){ txty=$((txty - 30)); }
evalsel(){ sely=$((sely - 30)); }
evalchx(){ chxy=$((chxy - 30)); }

main_window()
{
	txty=185
	sely=180
	chxy=185
	
	conf="
	# *.transparency=0.95
	*.title = cDock
	*.floating = 1
	*.autosavekey = cDock
	"
	
	conf=$conf"
	# Appearance text
	tb0.type = text
	tb0.default = Dock theme:
	tb0.height = 0
	tb0.width = 150
	tb0.x = 0
	tb0.y = $txty
	"
	evaltxt

	conf=$conf"
	# Appearance selector
	pop0.type = popup
	pop0.width = 120
	pop0.option = Current
	pop0.option = Custom
	pop0.option = Transparent
	pop0.default = Current
	pop0.x = 80
	pop0.y = $sely
	"
	evalsel
	
	conf=$conf"
	# Dock position text
	tb4.type = text
	tb4.default = Dock position (Mav):
	tb4.height = 0
	tb4.width = 150
	tb4.x = 0
	tb4.y = $txty
	"
	evaltxt
	
	conf=$conf"
	# Dock position
	pop4.type = popup
	pop4.width = 75
	pop4.option = start
	pop4.option = middle
	pop4.option = end
	pop4.default = $dpos
	pop4.x = 125
	pop4.y = $sely
	"
	evalsel
	
	conf=$conf"
	# App spacers text
	tb1.type = text
	tb1.default = Add app spacers:
	tb1.height = 0
	tb1.width = 150
	tb1.x = 0
	tb1.y = $txty
	"
	evaltxt
	
	conf=$conf"
	# App spacers
	pop1.type = popup
	pop1.width = 50
	pop1.option = 0
	pop1.option = 1
	pop1.option = 2
	pop1.option = 3
	pop1.option = 4
	pop1.option = 5
	pop1.default = 0
	pop1.x = 150
	pop1.y = $sely
	"
	evalsel
	
	conf=$conf"
	# Doc spacers text
	tb2.type = text
	tb2.default = Add doc spacers:
	tb2.height = 0
	tb2.width = 150
	tb2.x = 0
	tb2.y = $txty
	"
	evaltxt
	
	conf=$conf"
	# Doc spacers
	pop2.type = popup
	pop2.width = 50
	pop2.option = 0
	pop2.option = 1
	pop2.option = 2
	pop2.option = 3
	pop2.option = 4
	pop2.option = 5
	pop2.default = 0
	pop2.x = 150
	pop2.y = $sely
	"
	evalsel
	
	conf=$conf"	
	# Recent items stack text
	tb3.type = text
	tb3.default = Add recents folder:
	tb3.height = 0
	tb3.width = 150
	tb3.x = 0
	tb3.y = $txty
	"
	evaltxt
	
	conf=$conf"
	# Recent items stack
	pop3.type = popup
	pop3.width = 50
	pop3.option = No
	pop3.option = Yes
	pop3.default = No
	pop3.x = 150
	pop3.y = $sely
	"
	evalsel
	
	conf=$conf"
	# Active applications
	chk2.type = checkbox
	chk2.label = Show only active applications
	chk2.default = $staticO
	chk2.x = 225
	chk2.y = $chxy
	"
	evalchx
	
	conf=$conf"
	# Dim hidden items
	chk3.type = checkbox
	chk3.label = Dim hidden items
	chk3.default = $dhi
	chk3.x = 225
	chk3.y = $chxy
	"
	evalchx
	
	conf=$conf"
	# Lock dock contents
	chk4.type = checkbox
	chk4.label = Lock dock contents
	chk4.default = $ldc
	chk4.x = 225
	chk4.y = $chxy
	"
	evalchx
	
	conf=$conf"
	# Mouse over highlight
	chk5.type = checkbox
	chk5.label = Mouse over highlight
	chk5.default = $mohs
	chk5.x = 225
	chk5.y = $chxy
	"
	evalchx
	
	conf=$conf"
	# Colored Finder sidebar
	chk1.type = checkbox
	chk1.label = Colored Finder sidebar
	chk1.default = $cfsb
	chk1.x = 225
	chk1.y = $chxy
	"
	evalchx
	
	conf=$conf"
	# Settings button
	settingb.type = button
	settingb.label = cDock Settings
	"
	
	conf=$conf"
	# Donate button
	donateb.type = button
	donateb.label = Donate
	"
	
	conf=$conf"
	# Cancel button
	cb.type = cancelbutton
	cb.label = Quit
	"
	
	conf=$conf"
	# Accept button
	db.type = defaultbutton
	db.label = Apply
	"

	mvr=$(verres $ver "10.10")
	echo -e "\n$mvr\n"

	if [[  $mvr != "<" ]]; then
		conf="${conf}""
		pop4.disabled = 1
		"
	fi

	rsync -ruv "$app_support"/themes/ "$my_themes"
	if ! [[ -e "$my_themes" ]]; then echo "Oh shit!"; fi
	for f in $HOME/Library/'Application Support'/cDock/themes/*
	do
		echo "$f"
		yolo=$(basename "$f")
		conf="${conf}""
		pop0.option = $yolo
		"
	done
	
	conf="${conf}""
	pop0.option = Restore
	"

	pashua_run "$conf" 'utf8'

	# Settings button clicked
	if [[ $settingb -eq 1 ]]; then
		settingb=0
		
		# Open settings window
		settings_window
		
		if [[ $swOK -eq 1 ]]; then
			update_settings
		fi
		
		# Reopen main window when settings window closes
		main_window
	fi
}

# Set up variables
res[0]=0
cocoad=./updates/wUpdater.app/Contents/Resource/cocoaDialog.app/Contents/MacOS/cocoaDialog
sourcedock=./premade/transparent.txt
plist=~/Library/Preferences/org.w0lf.cDock.plist
customdock=false
installme=false
autoCheck=$(defaults read "${plist}" autoCheck 2>/dev/null || { defaults write "${plist}" autoCheck 1; echo -n 1; } )
autoInstall=$(defaults read "${plist}" autoInstall 2>/dev/null || { defaults write "${plist}" autoInstall 0; echo -n 0; } )
ver=$(sw_vers -productVersion)
scriptDirectory=$(cd "${0%/*}" && echo $PWD)
app_support="$scriptDirectory"/app_support
bundles="$scriptDirectory"/bundles
myDir="$scriptDirectory"
for i in {1..2}; do myDir=$(dirname "$myDir"); done
my_themes=$HOME/Library/'Application Support'/cDock/themes
dockify=false
killfinder=false
jimbo=""

# Start logging
logging
exec &>~/Library/Application\ Support/cDock/.logs/1.log

# Setup directories
dir_setup

# Setup preferences
preferences

# Read preferences
if [[ -e ~/Library/Application\ Support/SIMBL/Plugins/ColorfulSidebar.bundle ]]; then
	cfsb=1
else
	cfsb=0
fi

# Show Only Active Applications
staticO=$(defaults read com.apple.dock static-only 2>/dev/null || echo 0)

# Maximum Magnification Level
lrgs=$(defaults read com.apple.dock largesize 2>/dev/null || echo 42)

# Dock Position // Mav only
dpos=$(defaults read com.apple.dock pinning 2>/dev/null || echo middle)
#start, end, middle

# Dim hidden items
dhi=$(defaults read com.apple.dock showhidden 2>/dev/null || echo 1)

# Lock dock contents
ldc=$(defaults read com.apple.Dock contents-immutable 2>/dev/null || echo 0)

# Mouse over highlight
mohs=$(defaults read com.apple.dock mouse-over-hilite-stack 2>/dev/null || echo 0)

# Check for updates
if [[ $autoCheck == 1 ]]; then updates; fi

main_window

# Donate button clicked
if [[ $donateb -eq 1 ]]; then
	open http://goo.gl/vF92sf
fi

# Apply button clicked
if [[ $db -eq 1 ]]; then
	get_results
	if ($installme); then
		install_bundle
	fi
	killall "Dock"
	if ($killfinder); then
		killall "Finder"
	fi
	if ($dockify); then
		#killall "cDock Agent"
		open ~/Library/Application\ Support/cDock/helpers/cDock\ Agent.app
		echo -e "Finished installing, starting dockmonitor...\n"
	fi
fi

#END